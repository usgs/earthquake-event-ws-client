package gov.usgs.earthquake.event;

import java.math.BigDecimal;
import java.math.MathContext;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.Rule;
import org.junit.contrib.java.lang.system.ExpectedSystemExit;

/**
 * Tests for EventIDAssociator.
 */
public class EventIDAssociatorTest {

	private EventIDAssociator testAssociator;
	private TestEventWebService testService;

	private static final BigDecimal MAGNITUDE_DIFFERENCE = new BigDecimal(".567");
	private static final BigDecimal DEPTH_DIFFERENCE = new BigDecimal("13.2");

	/** Used to test System.exit() calls. */
	@Rule
	public final ExpectedSystemExit exit = ExpectedSystemExit.none();

	@Before
	public void setup() {
		testService = new TestEventWebService();
		testAssociator = new EventIDAssociator(testService, new EventComparison(
				EventIDAssociator.DEFAULT_TIME_DIFFERENCE,
				EventIDAssociator.DEFAULT_LOCATION_DIFFERENCE, MAGNITUDE_DIFFERENCE,
				DEPTH_DIFFERENCE), new EventSanityCheck());
	}

	/**
	 * Make sure default constructor can be used without exceptions being thrown.
	 */
	@Test
	public void defaultContructorWorks() {
		try {
			new EventIDAssociator();
		} catch (MalformedURLException mue) {
			Assert.fail("default contructor threw exception");
		}
	}

	/**
	 * Test getter/setters.
	 */
	@Test
	public void testGetterSetters() {
		EventWebService service = new EventWebService(null);
		testAssociator.setEventWebService(service);
		Assert.assertSame("service getter/setter",
				service, testAssociator.getEventWebService());

		EventSanityCheck testCheck = new EventSanityCheck();
		testAssociator.setEventSanityCheck(testCheck);
		Assert.assertSame("sanity check getter/setter",
				testCheck, testAssociator.getEventSanityCheck());

		EventComparison testCriteria = new EventComparison(null, null, null, null);
		testAssociator.setNearbyCriteria(testCriteria);
		Assert.assertSame("criteria getter/setter",
				testCriteria, testAssociator.getNearbyCriteria());
	}

	/**
	 * Check the nearby queries generated by event id associator match
	 * expectations.
	 * 
	 * @throws Exception
	 */
	@Test
	public void testNearbyQuery() throws Exception {
		DefaultEventInfo event = new DefaultEventInfo();
		event.setTime(new Date());
		event.setLatitude(new BigDecimal("34"));
		event.setLongitude(new BigDecimal("-118"));
		event.setDepth(new BigDecimal("1.32"));
		event.setMagnitude(new BigDecimal("4.5"));

		EventQuery query;
		EventComparison criteria = testAssociator.getNearbyCriteria();

		testAssociator.getNearbyEvents(event, null);
		query = testService.lastQuery;
		long milliseconds = testAssociator.getNearbyCriteria().getTimeDifference()
				.multiply(new BigDecimal("1000")).longValue();
		Assert.assertEquals("expected start time", query.getStartTime(), new Date(
				event.getTime().getTime() - milliseconds));
		Assert.assertEquals("expected end time", query.getEndTime(), new Date(event
				.getTime().getTime() + milliseconds));
		Assert.assertEquals("expected latitude", event.getLatitude(),
				query.getLatitude());
		Assert.assertEquals("expected longitude", event.getLongitude(),
				query.getLongitude());
		Assert.assertEquals(
				"expected radius",
				criteria.getLocationDifference().divide(
						EventIDAssociator.KILOMETERS_PER_DEGREE, MathContext.DECIMAL32),
				query.getMaxRadius());
		Assert.assertEquals("expected min depth",
				event.getDepth().subtract(criteria.getDepthDifference()),
				query.getMinDepth());
		Assert.assertEquals("expected max depth",
				event.getDepth().add(criteria.getDepthDifference()),
				query.getMaxDepth());
		Assert.assertEquals("expected min magnitude", event.getMagnitude()
				.subtract(criteria.getMagnitudeDifference()), query.getMinMagnitude());
		Assert.assertEquals("expected max magnitude",
				event.getMagnitude().add(criteria.getMagnitudeDifference()),
				query.getMaxMagnitude());

		Assert.assertNull("expected null network", query.getCatalog());

		testAssociator.getNearbyEvents(event, "testnetwork");
		query = testService.lastQuery;
		Assert.assertEquals("expected null network", "testnetwork",
				query.getCatalog());

		try {
			testAssociator.getNearbyEvents(new DefaultEventInfo(), null);
			Assert.fail("empty event should throw exception");
		} catch (IllegalArgumentException iae) {
			// expected
		}
	}

	/**
	 * When a criteria is null, it should not be used in a query.
	 */
	@Test
	public void testNullCriteria() throws Exception {
		EventQuery query = null;
		Date time = new Date();
		BigDecimal latitude = new BigDecimal("34");
		BigDecimal longitude = new BigDecimal("-118");
		BigDecimal depth = new BigDecimal("1.32");
		BigDecimal magnitude = new BigDecimal("4.5");
		String network = "net";

		// null location criteria
		testAssociator.setNearbyCriteria(new EventComparison(
				BigDecimal.ONE, null, BigDecimal.ONE, BigDecimal.ONE));
		testAssociator.getNearbyEvents(time, latitude, longitude, depth, magnitude, null);
		query = testService.lastQuery;
		Assert.assertNotNull("starttime", query.getStartTime());
		Assert.assertNotNull("endtime", query.getEndTime());
		Assert.assertNull("no longitude", query.getLongitude());
		Assert.assertNull("no latitude", query.getLatitude());
		Assert.assertNull("no maxradius", query.getMaxRadius());
		Assert.assertNotNull("mindepth", query.getMinDepth());
		Assert.assertNotNull("maxdepth", query.getMaxDepth());
		Assert.assertNotNull("minmagnitude", query.getMinMagnitude());
		Assert.assertNotNull("maxmagnitude", query.getMaxMagnitude());
		Assert.assertNull("catalog", query.getCatalog());

		// do opposite
		testAssociator.setNearbyCriteria(new EventComparison(
				null, BigDecimal.ONE, null, null));
		testAssociator.getNearbyEvents(time, latitude, longitude, depth, magnitude, network);
		query = testService.lastQuery;
		Assert.assertNull("no starttime", query.getStartTime());
		Assert.assertNull("no endtime", query.getEndTime());
		Assert.assertNotNull("longitude", query.getLongitude());
		Assert.assertNotNull("latitude", query.getLatitude());
		Assert.assertNotNull("maxradius", query.getMaxRadius());
		Assert.assertNull("no mindepth", query.getMinDepth());
		Assert.assertNull("no maxdepth", query.getMaxDepth());
		Assert.assertNull("no minmagnitude", query.getMinMagnitude());
		Assert.assertNull("no maxmagnitude", query.getMaxMagnitude());
		Assert.assertNotNull("catalog", query.getCatalog());

		// with location criteria and partial location
		testAssociator.setNearbyCriteria(new EventComparison(
				BigDecimal.ONE, BigDecimal.ONE, null, null));
		testAssociator.getNearbyEvents(time, null, longitude, depth, magnitude, null);
		query = testService.lastQuery;
		Assert.assertNull("no longitude", query.getLongitude());
		Assert.assertNull("no latitude", query.getLatitude());
		Assert.assertNull("no maxradius", query.getMaxRadius());
		testAssociator.getNearbyEvents(time, latitude, null, depth, magnitude, null);
		query = testService.lastQuery;
		Assert.assertNull("no longitude", query.getLongitude());
		Assert.assertNull("no latitude", query.getLatitude());
		Assert.assertNull("no maxradius", query.getMaxRadius());
	}

	/**
	 * Test sort order via getSortedNearbyEvents.
	 */
	@Test
	public void testAssociatorSort() throws Exception {
		// add out of order to events list
		JsonEventInfoComparatorTest comparatorTest = new JsonEventInfoComparatorTest();
		comparatorTest.setup();
		testService.events.add(comparatorTest.farEvent);
		testService.events.add(comparatorTest.fartherEvent);
		testService.events.add(comparatorTest.closeEvent);

		JsonEventInfo reference = new JsonEventInfo(comparatorTest.referenceEvent);
		List<JsonEventInfo> sorted = testAssociator.getSortedNearbyEvents(
				reference, null);
		Assert.assertEquals("closest event first",
				comparatorTest.closeEvent, sorted.get(0).getEvent());
		Assert.assertEquals("farther event last",
				comparatorTest.fartherEvent,
				sorted.get(testService.events.size() - 1).getEvent());

		System.err.println(testAssociator.formatOutput(reference, null, sorted));
	}

	@Test
	public void testExitCodes() throws Exception {
		// add out of order to events list
		JsonEventInfoComparatorTest comparatorTest = new JsonEventInfoComparatorTest();
		comparatorTest.setup();
		testService.events.add(comparatorTest.farEvent);
		testService.events.add(comparatorTest.fartherEvent);
		testService.events.add(comparatorTest.closeEvent);
		JsonEventInfo reference = new JsonEventInfo(comparatorTest.referenceEvent);
		List<JsonEventInfo> sorted = testAssociator.getSortedNearbyEvents(
				reference, null);
		JsonEventInfo good = sorted.get(0);
		JsonEventInfo bad = sorted.get(2);

		// no events
		Assert.assertEquals("no events",
				EventIDAssociator.EXIT_EVENT_NOT_FOUND,
				testAssociator.getExitCode(new ArrayList<JsonEventInfo>()));
		// multiple events
		Assert.assertEquals("multiple events",
				EventIDAssociator.EXIT_MULTIPLE_EVENTS_FOUND,
				testAssociator.getExitCode(sorted));
		// one good event
		sorted.clear();
		sorted.add(good);
		Assert.assertEquals("one good event",
				EventIDAssociator.EXIT_SUCCESS,
				testAssociator.getExitCode(sorted));
		// one bad event
		sorted.clear();
		sorted.add(bad);
		Assert.assertEquals("one bad event",
				EventIDAssociator.EXIT_EVENT_NOT_SANE,
				testAssociator.getExitCode(sorted));
	}

	@Test
	public void testUsageNoArgs() throws Exception {
		exit.expectSystemExitWithStatus(EventIDAssociator.EXIT_USAGE);
		// no time, latitude, or longitude
		EventIDAssociator.main(new String[] {});
	}

	@Test
	public void testUsageLatOnly() throws Exception {
		exit.expectSystemExitWithStatus(EventIDAssociator.EXIT_USAGE);
		// no time, or longitude
		EventIDAssociator.main(new String[] {
				EventIDAssociator.LATITUDE_ARGUMENT + "35"});
	}

	@Test
	public void testTimeOnly() throws Exception {
		exit.expectSystemExitWithStatus(EventIDAssociator.EXIT_MULTIPLE_EVENTS_FOUND);
		// serve a custom feed with multiple events
		EventWebServiceTest.TestingWebServer server =
				new EventWebServiceTest.TestingWebServer(
						5678,
						"etc/testdata/summary.geojson");
		server.start();
		EventIDAssociator.main(new String[] {
				// include time argument so it will run
				EventIDAssociator.TIME_ARGUMENT + ISO8601.format(new Date()),
				// use testing web server to get data
				EventIDAssociator.SERVICE_URL_ARGUMENT + "http://localhost:5678/"
		});
		server.stop();
	}

	@Test
	public void testLatitudeLongitudeOnly() throws Exception {
		exit.expectSystemExitWithStatus(EventIDAssociator.EXIT_MULTIPLE_EVENTS_FOUND);
		// serve a custom feed with multiple events
		EventWebServiceTest.TestingWebServer server =
				new EventWebServiceTest.TestingWebServer(
						5679,
						"etc/testdata/summary.geojson");
		server.start();
		EventIDAssociator.main(new String[] {
				// include lat and lon argument so it will run
				EventIDAssociator.LATITUDE_ARGUMENT + "34",
				EventIDAssociator.LONGITUDE_ARGUMENT + "-118",
				// use testing web server to get data
				EventIDAssociator.SERVICE_URL_ARGUMENT + "http://localhost:5679/"
		});
		server.stop();
	}

	@Test
	public void testSuccess() throws Exception {
		// serve a custom feed with multiple events
		EventWebServiceTest.TestingWebServer server =
				new EventWebServiceTest.TestingWebServer(
						5680,
						"etc/testdata/detail.geojson");
		server.start();
		EventIDAssociator.main(new String[] {
				// include lat and lon argument so it will run
				EventIDAssociator.LATITUDE_ARGUMENT + "-4.9489",
				EventIDAssociator.LONGITUDE_ARGUMENT + "102.3727",
				// use testing web server to get data
				EventIDAssociator.SERVICE_URL_ARGUMENT + "http://localhost:5680/"
		});
		server.stop();
	}

	@Test
	public void testParseNetwork() {
		String network = "testnetwork";

		Assert.assertNull("default network is null",
				EventIDAssociator.parseNetwork(new String[]{ "--latitude=123" }));

		Assert.assertEquals("parse network argument", network,
				EventIDAssociator.parseNetwork(new String[] {
						EventIDAssociator.NETWORK_ARGUMENT + network
				}));
	}

	@Test
	public void testParseReferenceEvent() {
		Date time = new Date();
		BigDecimal latitude = new BigDecimal("34.6");
		BigDecimal longitude = new BigDecimal("-117.8");
		BigDecimal magnitude = new BigDecimal("3.2");
		BigDecimal depth = new BigDecimal("34.5");

		EventInfo test = EventIDAssociator.parseReferenceEvent(new String[] {
				EventIDAssociator.TIME_ARGUMENT + ISO8601.format(time),
				EventIDAssociator.LATITUDE_ARGUMENT + latitude.toString(),
				EventIDAssociator.LONGITUDE_ARGUMENT + longitude.toString(),
				EventIDAssociator.DEPTH_ARGUMENT + depth.toString(),
				EventIDAssociator.MAGNITUDE_ARGUMENT + magnitude.toString()
		});

		Assert.assertEquals("time parsed", time, test.getTime());
		Assert.assertEquals("latitude parsed", latitude, test.getLatitude());
		Assert.assertEquals("longitude parsed", longitude, test.getLongitude());
		Assert.assertEquals("depth parsed", depth, test.getDepth());
		Assert.assertEquals("magnitude parsed", magnitude, test.getMagnitude());
	}

	@Test
	public void testParseEventIDAssociator() throws MalformedURLException {
		URL serviceURL = new URL("http://test.com/");
		BigDecimal timeDifference = new BigDecimal("0.1");
		BigDecimal locationDifference = new BigDecimal("0.2");
		BigDecimal depthDifference = new BigDecimal("0.3");
		BigDecimal magnitudeDifference = new BigDecimal("0.4");
		BigDecimal timeCheck = new BigDecimal("0.5");
		BigDecimal locationCheck = new BigDecimal("0.6");
		BigDecimal depthCheck = new BigDecimal("0.7");
		BigDecimal magnitudeCheck = new BigDecimal("0.8");

		EventIDAssociator test = EventIDAssociator.parseEventIDAssociator(
				new String[] {
						EventIDAssociator.SERVICE_URL_ARGUMENT + serviceURL,
						EventIDAssociator.TIME_DIFFERENCE_ARGUMENT + timeDifference,
						EventIDAssociator.LOCATION_DIFFERENCE_ARGUMENT + locationDifference,
						EventIDAssociator.DEPTH_DIFFERENCE_ARGUMENT + depthDifference,
						EventIDAssociator.MAGNITUDE_DIFFERENCE_ARGUMENT + magnitudeDifference,
						EventIDAssociator.TIME_CHECK_ARGUMENT + timeCheck,
						EventIDAssociator.LOCATION_CHECK_ARGUMENT + locationCheck,
						EventIDAssociator.DEPTH_CHECK_ARGUMENT + depthCheck,
						EventIDAssociator.MAGNITUDE_CHECK_ARGUMENT + magnitudeCheck
				});

		Assert.assertEquals("service url parsed",
				serviceURL, test.getEventWebService().getServiceUrl());

		EventComparison compare = test.getNearbyCriteria();
		Assert.assertEquals("time difference parsed",
				timeDifference, compare.getTimeDifference());
		Assert.assertEquals("location difference parsed",
				locationDifference, compare.getLocationDifference());
		Assert.assertEquals("depth difference parsed",
				depthDifference, compare.getDepthDifference());
		Assert.assertEquals("magnitude difference parsed",
				magnitudeDifference, compare.getMagnitudeDifference());

		EventSanityCheck sanity = test.getEventSanityCheck();
		Assert.assertEquals("time difference parsed",
				timeCheck, sanity.getTimeThreshold());
		Assert.assertEquals("location difference parsed",
				locationCheck, sanity.getDistanceThreshold());
		Assert.assertEquals("depth difference parsed",
				depthCheck, sanity.getDepthThreshold());
		Assert.assertEquals("magnitude difference parsed",
				magnitudeCheck, sanity.getMagnitudeThreshold());
	}

	/**
	 * Test event web service that returns empty list of events, and captures
	 * queries for inspection.
	 */
	public static class TestEventWebService extends EventWebService {

		public TestEventWebService() {
			super(null);
		}

		public EventQuery lastQuery = null;
		public List<JsonEvent> events = new ArrayList<JsonEvent>();

		@Override
		public List<JsonEvent> getEvents(final EventQuery query) {
			this.lastQuery = query;
			return events;
		}

	}

}
